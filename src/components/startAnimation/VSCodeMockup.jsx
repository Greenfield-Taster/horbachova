import React, { useState, useEffect, useMemo, useRef } from "react";
import "./VSCodeMockup.scss";
import TypingSound from "../../utils/typingSound";
import { ANIMATION_CONFIG } from "../../utils/animationConfig";

const VSCodeMockup = () => {
  const [typedCode, setTypedCode] = useState("");
  const [currentCharIndex, setCurrentCharIndex] = useState(0);
  const [showAnimation, setShowAnimation] = useState(true);
  const [isVisible, setIsVisible] = useState(false);
  const [currentLine, setCurrentLine] = useState(1);
  const [currentCol, setCurrentCol] = useState(1);
  const [soundEnabled, setSoundEnabled] = useState(false);
  const typingSoundRef = useRef(new TypingSound());

  const fullCode = useMemo(
    () => `// Horbachova Portfolio
import React, { useState } from 'react';
import { BrowserRouter as Router } from 'react-router-dom';

const App = () => {
  const [theme, setTheme] = useState('dark');
  
  return (
    <Router>
      <div className={\`app \${theme}\`}>
        <Header />
        <main>
          <Routes>
            <Route path="/" element={<About />} />
          </Routes>
        </main>
      </div>
    </Router>
  );
};

export default App;`,
    []
  );

  // –ü–æ—è–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsVisible(true);
    }, ANIMATION_CONFIG.TIMINGS.APPEAR_DELAY);
    return () => clearTimeout(timer);
  }, []);

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
  const updateCursorPosition = (charIndex) => {
    const textUpToCursor = fullCode.slice(0, charIndex);
    const lines = textUpToCursor.split('\n');
    setCurrentLine(lines.length);
    setCurrentCol(lines[lines.length - 1].length + 1);
  };

  const getTypingSpeed = (char, prevChar) => {
    const config = ANIMATION_CONFIG.CHAR_SPEEDS;
    
    // –ë—ã—Å—Ç—Ä–µ–µ –ø–µ—á–∞—Ç–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    if (char === ' ') {
      return config.space.min + Math.random() * (config.space.max - config.space.min);
    }
    
    // –ü—É–Ω–∫—Ç—É–∞—Ü–∏—è
    if ([',', ';', '(', ')', '{', '}', '[', ']'].includes(char)) {
      return config.punctuation.min + Math.random() * (config.punctuation.max - config.punctuation.min);
    }
    
    // –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –Ω–∞ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
    if (prevChar === '\n') {
      return config.newline.min + Math.random() * (config.newline.max - config.newline.min);
    }
    
    // –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    if (prevChar === '/' && char === '/') {
      return config.comment.min + Math.random() * (config.comment.max - config.comment.min);
    }
    
    // –û–±—ã—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    return config.normal.min + Math.random() * (config.normal.max - config.normal.min);
  };

  // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
  const colorizeCode = (code) => {
    const tokens = [];
    let i = 0;
    
    while (i < code.length) {
      let matched = false;
      
      // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      if (code.slice(i, i + 2) === '//') {
        const lineEnd = code.indexOf('\n', i);
        const commentEnd = lineEnd === -1 ? code.length : lineEnd;
        tokens.push({ type: 'comment', text: code.slice(i, commentEnd) });
        i = commentEnd;
        matched = true;
      }
      // –°—Ç—Ä–æ–∫–æ–≤—ã–µ –ª–∏—Ç–µ—Ä–∞–ª—ã
      else if (['"', "'", '`'].includes(code[i])) {
        const quote = code[i];
        let j = i + 1;
        while (j < code.length && code[j] !== quote) {
          if (code[j] === '\\\\') j++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
          j++;
        }
        if (j < code.length) j++; // –í–∫–ª—é—á–∞–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é –∫–∞–≤—ã—á–∫—É
        tokens.push({ type: 'string', text: code.slice(i, j) });
        i = j;
        matched = true;
      }
      // –ß–∏—Å–ª–∞
      else if (/\d/.test(code[i])) {
        let j = i;
        while (j < code.length && /[\d.]/.test(code[j])) j++;
        tokens.push({ type: 'number', text: code.slice(i, j) });
        i = j;
        matched = true;
      }
      // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      else if (/[a-zA-Z_$]/.test(code[i])) {
        let j = i;
        while (j < code.length && /[a-zA-Z0-9_$]/.test(code[j])) j++;
        const word = code.slice(i, j);
        
        let type = 'identifier';
        const keywords = ['import', 'export', 'default', 'const', 'let', 'var', 'function', 'return', 'from', 'async', 'await', 'try', 'catch', 'if', 'else', 'new', 'Promise', 'setTimeout', 'console'];
        const components = ['React', 'useState', 'useEffect', 'App', 'Router', 'Routes', 'Route', 'BrowserRouter', 'Header', 'About', 'Projects', 'Contact'];
        
        if (keywords.includes(word)) {
          type = 'keyword';
        } else if (components.includes(word)) {
          type = 'component';
        }
        
        tokens.push({ type, text: word });
        i = j;
        matched = true;
      }
      // –ú–Ω–æ–≥–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
      else if (code.slice(i, i + 3) === '===') {
        tokens.push({ type: 'operator', text: '===' });
        i += 3;
        matched = true;
      }
      else if (code.slice(i, i + 2) === '=>') {
        tokens.push({ type: 'operator', text: '=>' });
        i += 2;
        matched = true;
      }
      else if (code.slice(i, i + 2) === '&&') {
        tokens.push({ type: 'operator', text: '&&' });
        i += 2;
        matched = true;
      }
      else if (code.slice(i, i + 2) === '++') {
        tokens.push({ type: 'operator', text: '++' });
        i += 2;
        matched = true;
      }
      // –û–¥–Ω–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
      else if (['=', '+', '-', '*', '/', '!', '&', '|'].includes(code[i])) {
        tokens.push({ type: 'operator', text: code[i] });
        i++;
        matched = true;
      }
      // –ü—É–Ω–∫—Ç—É–∞—Ü–∏—è
      else if (['{', '}', '(', ')', '[', ']', ';', ',', '.', ':', '?'].includes(code[i])) {
        tokens.push({ type: 'punctuation', text: code[i] });
        i++;
        matched = true;
      }
      
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–≤–ø–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
      if (!matched) {
        tokens.push({ type: 'text', text: code[i] });
        i++;
      }
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    return tokens.map(token => {
      const escapedText = token.text
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#39;');
      
      if (token.type === 'text' || token.type === 'identifier') {
        return escapedText;
      }
      
      return `<span class="${token.type}">${escapedText}</span>`;
    }).join('');
  };

  useEffect(() => {
    if (currentCharIndex < fullCode.length && showAnimation && isVisible) {
      const currentChar = fullCode[currentCharIndex];
      const prevChar = currentCharIndex > 0 ? fullCode[currentCharIndex - 1] : '';
      const speed = getTypingSpeed(currentChar, prevChar);
      
      const timer = setTimeout(() => {
        setTypedCode(fullCode.slice(0, currentCharIndex + 1));
        updateCursorPosition(currentCharIndex + 1);
        
        // Play typing sound if enabled
        if (soundEnabled) {
          const charType = typingSoundRef.current.getCharType(currentChar);
          typingSoundRef.current.playKeystroke(charType);
        }
        
        setCurrentCharIndex(prev => prev + 1);
      }, speed);

      return () => clearTimeout(timer);
    } else if (currentCharIndex >= fullCode.length) {
      // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
      const hideTimer = setTimeout(() => {
        setShowAnimation(false);
      }, ANIMATION_CONFIG.TIMINGS.FINAL_SCREEN_DURATION);
      
      return () => clearTimeout(hideTimer);
    }
  }, [currentCharIndex, fullCode.length, showAnimation, isVisible, soundEnabled]);

  const toggleSound = () => {
    if (!soundEnabled) {
      typingSoundRef.current.enable();
    }
    setSoundEnabled(!soundEnabled);
  };

  const resetAnimation = () => {
    setTypedCode("");
    setCurrentCharIndex(0);
    setCurrentLine(1);
    setCurrentCol(1);
    setShowAnimation(true);
    setIsVisible(false);
    setTimeout(() => setIsVisible(true), ANIMATION_CONFIG.TIMINGS.RESET_TRANSITION);
  };

  const skipAnimation = () => {
    setTypedCode(fullCode);
    setCurrentCharIndex(fullCode.length);
    updateCursorPosition(fullCode.length);
  };

  if (!showAnimation) {
    return null; // –°–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  }

  return (
    <div className={`vscode-container ${isVisible ? 'visible' : ''}`}>
      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å */}
      <div className="vscode-header">
        <div className="window-controls">
          <div className="control close"></div>
          <div className="control minimize"></div>
          <div className="control maximize"></div>
        </div>
        <div className="file-tabs">
          <div className="tab active">
            <span className="tab-icon">‚öõÔ∏è</span>
            App.js
            <span className="tab-close">√ó</span>
          </div>
          <div className="tab">
            <span className="tab-icon">üé®</span>
            App.css
          </div>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å */}
      <div className="vscode-body">
        {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
        <div className="sidebar">
          <div className="sidebar-icon active">üìÅ</div>
          <div className="sidebar-icon">üîç</div>
          <div className="sidebar-icon">üîÄ</div>
          <div className="sidebar-icon">üêõ</div>
          <div className="sidebar-icon">üß©</div>
        </div>

        {/* –ü—Ä–æ–≤–æ–¥–Ω–∏–∫ —Ñ–∞–π–ª–æ–≤ */}
        <div className="file-explorer">
          <div className="explorer-header">EXPLORER</div>
          <div className="folder-tree">
            <div className="folder expanded">
              üìÅ horbachova-portfolio
              <div className="folder-content">
                <div className="folder">üìÅ public</div>
                <div className="folder expanded">
                  üìÅ src
                  <div className="folder-content">
                    <div className="file active">üìÑ App.js</div>
                    <div className="file">üìÑ App.css</div>
                    <div className="file">üìÑ index.js</div>
                    <div className="folder">üìÅ components</div>
                    <div className="folder">üìÅ pages</div>
                  </div>
                </div>
                <div className="file">üìÑ package.json</div>
                <div className="file">üìÑ README.md</div>
              </div>
            </div>
          </div>
        </div>

        {/* –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞ */}
        <div className="code-editor">
          <div className="editor-header">
            <div className="breadcrumb">src &gt; App.js</div>
            <div className="animation-controls">
              <button 
                className="control-btn sound" 
                onClick={toggleSound}
                title={soundEnabled ? 'Disable sound' : 'Enable sound'}
              >
                {soundEnabled ? 'üîä' : 'üîá'} Sound
              </button>
              <button className="control-btn skip" onClick={skipAnimation}>
                ‚è≠ Skip
              </button>
              <button className="control-btn reset" onClick={resetAnimation}>
                üîÑ Reset
              </button>
            </div>
          </div>
          <div className="code-area">
            <div className="line-numbers">
              {typedCode.split("\n").map((_, index) => (
                <div key={index} className={`line-number ${index + 1 === currentLine ? 'current' : ''}`}>
                  {index + 1}
                </div>
              ))}
            </div>
            <div className="code-content">
              <pre>
                <code 
                  className="javascript"
                  dangerouslySetInnerHTML={{
                    __html: colorizeCode(typedCode) + (currentCharIndex < fullCode.length ? '<span class="cursor">|</span>' : '')
                  }}
                />
              </pre>
            </div>
          </div>
        </div>
      </div>

      {/* –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ */}
      <div className="status-bar">
        <div className="status-left">
          <span className="branch">üîÄ main</span>
          <span className="errors">‚ùå 0</span>
          <span className="warnings">‚ö†Ô∏è 0</span>
          <span className="info">‚ÑπÔ∏è Portfolio ready</span>
        </div>
        <div className="status-right">
          <span>JavaScript React</span>
          <span>UTF-8</span>
          <span>LF</span>
          <span>Ln {currentLine}, Col {currentCol}</span>
        </div>
      </div>
    </div>
  );
};

export default VSCodeMockup;